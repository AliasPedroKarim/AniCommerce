security:
    
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    
    encoders:
        App\Entity\Utilisateur:
            algorithm: argon2i
        
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: courriel
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            user_checker: App\Security\UserChecker
            anonymous: lazy
            provider: users_in_memory
            guard:
                authenticators:
                    - App\Security\LoginFromAuthenticator
                    - App\Security\GoogleAuthenticator
                    - App\Security\FacebookAuthenticator
                    - App\Security\DiscordAuthenticator
                entry_point: App\Security\LoginFromAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/(login|register)$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/(profile|commande|lignecommande|import|export)$, roles: ROLE_USER }
        # - { path: ^/utilisateur, roles: ROLE_USER }
